// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id       String  @unique @default(uuid())
  name     String @unique
  phone    String?
  location String?

  foodPacks FoodPack[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Employee {
  id          String  @unique @default(uuid())
  name        String
  designation String?
  phone       String @unique
  password String?

  votes Vote[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model FoodPack {
  id          String  @unique @default(uuid())
  title       String 
  description String?

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  foodPackWithMeal   FoodPackWithMeal[]

  votes Vote[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model FoodPackWithMeal {
  foodPackId String
  foodPack   FoodPack @relation(fields: [foodPackId], references: [id])

  mealId String
  meal   Meal   @relation(fields: [mealId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@id([foodPackId, mealId])
}

model Meal {
  id    String  @unique @default(uuid())
  title String 
  price Int


  restaurantId String
  foodPackWithMeal   FoodPackWithMeal[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Vote {
  id String @unique @default(uuid())

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  foodPackId String
  foodPack   FoodPack @relation(fields: [foodPackId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}
